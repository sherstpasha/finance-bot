import asyncio
import os
import json
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

from config import BOT_TOKEN, USER_CONFIG_FILE
from google_utils import (
    create_spreadsheet,
    append_row,
    get_last_rows,
    update_row,
    delete_row,
)
from states import AddRecord, EditRecord

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å")],
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")],
    ],
    resize_keyboard=True,
)


async def cleanup_and_confirm(
    chat_id: int,
    msg_ids: list[int],
    confirm_text: str,
    reply_markup: ReplyKeyboardMarkup = None,
):
    # —É–¥–∞–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø–æ —Å–ø–∏—Å–∫—É
    for mid in msg_ids:
        try:
            await bot.delete_message(chat_id, mid)
        except:
            pass
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await bot.send_message(
        chat_id, confirm_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML
    )


# ========== START / MAIN MENU ==========


@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    if not os.path.exists(USER_CONFIG_FILE):
        sheet_url = create_spreadsheet()
        await message.answer(f"–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞:\n{sheet_url}", reply_markup=main_menu)
    else:
        with open(USER_CONFIG_FILE, "r") as f:
            sheet_id = json.load(f)["spreadsheet_id"]
        await message.answer(
            f"–¢–∞–±–ª–∏—Ü–∞:\nhttps://docs.google.com/spreadsheets/d/{sheet_id}",
            reply_markup=main_menu,
        )
    await state.clear()


# ========== ADD RECORD ==========


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def add_start(message: Message, state: FSMContext):
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ msg_ids
    await state.set_data({"msg_ids": [message.message_id]})

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ—Ö–æ–¥"), KeyboardButton(text="–†–∞—Å—Ö–æ–¥")],
            [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    bot_msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=kb)

    # —á–∏—Ç–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º id –±–æ—Ç–∞
    data = await state.get_data()
    msg_ids = data["msg_ids"] + [bot_msg.message_id]
    await state.update_data(msg_ids=msg_ids)

    await state.set_state(AddRecord.choosing_type)


@dp.message(AddRecord.choosing_type, F.text.in_(["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"]))
async def type_chosen(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_ids = data["msg_ids"] + [message.message_id]
    await state.update_data(entry_type=message.text, msg_ids=msg_ids)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    bot_msg = await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ: —Å—É–º–º–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—è 1, –∫–∞—Ç–µ–≥–æ—Ä–∏—è 2", reply_markup=kb
    )

    data = await state.get_data()
    await state.update_data(msg_ids=data["msg_ids"] + [bot_msg.message_id])
    await state.set_state(AddRecord.entering_data)


@dp.message(AddRecord.entering_data)
async def process_data(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_ids = data["msg_ids"] + [message.message_id]

    # –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    if message.text == "‚¨Ö –ù–∞–∑–∞–¥":
        await cleanup_and_confirm(
            message.chat.id, msg_ids, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu
        )
        return await state.clear()

    entry_type = data["entry_type"]
    try:
        parts = [p.strip() for p in message.text.split(",")]
        if len(parts) != 3:
            raise ValueError

        amount = float(parts[0])
        cat1, cat2 = parts[1], parts[2]
        append_row(
            [datetime.today().strftime("%Y-%m-%d"), entry_type, amount, cat1, cat2]
        )

        confirm = f"‚úî –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: <b>{entry_type}</b> {amount}‚ÇΩ ‚Äî {cat1} / {cat2}"
        await cleanup_and_confirm(
            message.chat.id, msg_ids, confirm, reply_markup=main_menu
        )
    except:
        await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: 1200, –µ–¥–∞, –∫–∞—Ñ–µ")
    finally:
        await state.clear()


# ========== EDIT / DELETE RECORD ==========


@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
async def edit_start(message: Message, state: FSMContext):
    rows = get_last_rows()
    if not rows:
        return await message.answer(
            "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.", reply_markup=main_menu
        )

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º msg_ids –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏
    await state.set_data({"msg_ids": [message.message_id], "rows": rows})

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n"
    for i, row in enumerate(rows, 1):
        text += f"{i}) {row[0]} ‚Äî {row[1]} {row[2]}‚ÇΩ ‚Äî {row[3]}/{row[4]}\n"

    buttons = [[KeyboardButton(text=str(i))] for i in range(1, len(rows) + 1)]
    buttons.append([KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")])
    kb = ReplyKeyboardMarkup(
        keyboard=buttons, resize_keyboard=True, one_time_keyboard=True
    )

    bot_msg = await message.answer(text, reply_markup=kb)

    data = await state.get_data()
    await state.update_data(msg_ids=data["msg_ids"] + [bot_msg.message_id])
    await state.set_state(EditRecord.choosing_record)


@dp.message(EditRecord.choosing_record)
async def choose_record(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_ids = data["msg_ids"] + [message.message_id]

    if message.text == "‚¨Ö –ù–∞–∑–∞–¥":
        await cleanup_and_confirm(
            message.chat.id, msg_ids, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu
        )
        return await state.clear()

    rows = data["rows"]
    try:
        idx = int(message.text)
        if not 1 <= idx <= len(rows):
            raise ValueError

        await state.update_data(selected_index=idx, msg_ids=msg_ids)

        kb = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
                    KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å"),
                ],
                [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")],
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        bot_msg = await message.answer("–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –∑–∞–ø–∏—Å—å—é?", reply_markup=kb)

        data = await state.get_data()
        await state.update_data(msg_ids=data["msg_ids"] + [bot_msg.message_id])
        await state.set_state(EditRecord.choosing_action)
    except:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–ø–∏—Å–∏.")


@dp.message(EditRecord.choosing_action)
async def action_selected(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_ids = data["msg_ids"] + [message.message_id]

    if message.text == "‚¨Ö –ù–∞–∑–∞–¥":
        await cleanup_and_confirm(
            message.chat.id, msg_ids, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu
        )
        return await state.clear()

    idx = data["selected_index"]
    old = data["rows"][idx - 1]

    # —É–¥–∞–ª–µ–Ω–∏–µ
    if message.text == "üóë –£–¥–∞–ª–∏—Ç—å":
        row_num = len(get_last_rows()) - idx + 2
        delete_row(row_num)
        await cleanup_and_confirm(
            message.chat.id, msg_ids, "üóë –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.", reply_markup=main_menu
        )
        return await state.clear()

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    new_type = "–î–æ—Ö–æ–¥" if old[1] == "–†–∞—Å—Ö–æ–¥" else "–†–∞—Å—Ö–æ–¥"
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=f"üîÅ –°–º–µ–Ω–∏—Ç—å —Ç–∏–ø –Ω–∞ {new_type}"),
                KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"),
            ],
        ],
        resize_keyboard=True,
    )
    prompt = (
        f"–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å:\n"
        f"{old[0]} ‚Äî {old[1]} {old[2]}‚ÇΩ ‚Äî {old[3]}/{old[4]}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ: —Å—É–º–º–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—è 1, –∫–∞—Ç–µ–≥–æ—Ä–∏—è 2"
    )
    bot_msg = await message.answer(prompt, reply_markup=kb)

    data = await state.get_data()
    await state.update_data(
        msg_ids=data["msg_ids"] + [bot_msg.message_id], edit_type=old[1]
    )
    await state.set_state(EditRecord.updating_record)


@dp.message(EditRecord.updating_record)
async def apply_update(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_ids = data["msg_ids"] + [message.message_id]

    # –ù–∞–∑–∞–¥
    if message.text == "‚¨Ö –ù–∞–∑–∞–¥":
        await cleanup_and_confirm(
            message.chat.id, msg_ids, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu
        )
        return await state.clear()

    idx = data["selected_index"] - 1
    old = data["rows"][idx]
    edit_type = data.get("edit_type", old[1])

    # —Å–º–µ–Ω–∞ —Ç–∏–ø–∞
    if message.text.startswith("üîÅ –°–º–µ–Ω–∏—Ç—å —Ç–∏–ø"):
        new_type = "–î–æ—Ö–æ–¥" if edit_type == "–†–∞—Å—Ö–æ–¥" else "–†–∞—Å—Ö–æ–¥"
        row_num = len(get_last_rows()) - idx + 1
        update_row(row_num, [old[0], new_type, old[2], old[3], old[4]])
        await cleanup_and_confirm(
            message.chat.id, msg_ids, "‚úÖ –¢–∏–ø –∏–∑–º–µ–Ω—ë–Ω.", reply_markup=main_menu
        )
        return await state.clear()

    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        parts = [p.strip() for p in message.text.split(",")]
        if len(parts) != 3:
            raise ValueError
        amount = float(parts[0])
        cat1, cat2 = parts[1], parts[2]
        new_row = [old[0], edit_type, amount, cat1, cat2]
        row_num = len(get_last_rows()) - idx + 1
        update_row(row_num, new_row)
        await cleanup_and_confirm(
            message.chat.id, msg_ids, "‚úî –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=main_menu
        )
    except:
        await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: 1500, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –º–µ—Ç—Ä–æ")
    finally:
        await state.clear()


# ========== RUN ==========


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
